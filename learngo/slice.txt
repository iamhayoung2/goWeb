동적배열 
길이가 변하는 배열
[] int



정적배열 fixed size array
[10] int 



동적배열
배열이 늘어나면,(길이) 메모리도 늘어나야 함. 
고정길이 배열이 따로 있고, 동적 배열은 그 배열을 point 하고 있다. 
동적배열은 실제 고정길이 배열을 point 하고 있다. 
[] int  ---> [][][][][][] 

얼마큼 늘어날까? 

1-> 2 -> 4개 -> 8개 -> 16개 
배열의 element가 늘어날때마다, 매번 추가하지 않도록, 여유분을 확인해놓는다. 


동적배열 선언 방식
var a [] int 
a := [] int{1,2,3,..}  : 처음에 초기화 하는 방식
a := make([]int, 3)  : 길이
a := make([]int, 0, 8)   : capacity 8

capacity : 확보해둔 공간
length : 실제 쓰고 있는 길이
* 정적배열에서는 capacity=length 
동적배열에서는 capacity : length에 여유분까지 포함
■ ■ ■ ■ ■ㅁㅁㅁ


append로 element 추가하기 
a := [] int {}
a = append(a, 1)
--> append(slice명, 추가할 것) , 반환값 : slice

a := [] int {1,2}
: capacity가 2니까
append(a,3)
3을 추가하려면, 새로운 slice를 만들어서, 3을 넣어서 반환함. (즉 메모리 주소가 바뀔 것이다. )

두 슬라이드의 공간을 애초에 다르게 쓰고 싶다면, append하지말고 copy 하기 



slice
 b := a[startIndx:EndIndx] : startInd~EndIndx-1 까지
 --> b는 a의 startIndx를 가르키고 있음. (같은 주소 값)
 a[4: ] : 5번째부터 끝까지 
 a[ :5] : 처음부터 4번째까지 

